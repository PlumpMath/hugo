(ns hugo.parser
(:require [net.cgrand.enlive-html :as html]))

(def *base-url* "http://www.thehugoawards.org/hugo-history/")

(defn fetch-url [url] (html/html-resource (java.net.URL. url)))

(defn get-award-links []
  (map #(:attrs %)   (html/select (fetch-url *base-url*)
                    #{[:div#content :li.page_item :a] [:li.page.item.subtext html/first-child]})))

(defn get-book-info [nominees]
  (map #(if (not (nil? (first (:content (first (:content %)))))) (merge {:winner (if (not (nil? (:attrs %))) (:class (:attrs %)))} 
               {:title (str (first (:content (first (:content %)))) (:content (first (:content %)))))}
               )) nominees))

(defn parse-award-page [url]
  (partition 2 (interleave 
                         (last (split-at 3 (keep #(if (nil? (:attrs %)) (:content %)) 
                                              (html/select (fetch-url url) #{[:div#content (html/but :p.tropy) :p] [:p html/first-child]}))))
  			 (map #(:content %) (html/select (fetch-url url) #{[:div#content :ul] }))) ))

(defn get-awards-per-year [url]
  (map #(merge {:award (first (first %))} 
               {:books (get-book-info (rest (second %)))}) (parse-award-page url)))

(defn get-awards []
  (map #(merge % {:nominees (get-awards-per-year (:href %))}) (get-award-links)))

(defn if-work-not-nil [work]
  (str (if (not (nil? (:title work))) (str "\n\t" (:title work)) ) (if (not (nil? (:winner work))) (str " (WINNER)") ) ""))

(defn format-nominees [works]
  (apply str (map if-work-not-nil works)))

(defn format-output [awards]
  (map #(str "\n" (:award %) (format-nominees (:books %)) "\n") awards))

